"""Задание № 1. Наследование Исходя из квиза к предыдущему занятию, у нас уже есть класс преподавателей и класс
студентов (вы можете взять этот код за основу или написать свой). Студентов пока оставим без изменения, а вот
преподаватели бывают разные, поэтому теперь класс Mentor должен стать родительским классом, а от него нужно реализовать
наследование классов Lecturer (лекторы) и Reviewer (эксперты, проверяющие домашние задания). Очевидно, имя, фамилия и
список закрепленных курсов логично реализовать на уровне родительского класса. А чем же будут специфичны дочерние
классы? Об этом в следующих заданиях."""

#Создаем родительский класс "преподаватели" с указанными атрибутами имя, фамилия, закрепленные курсы
class Mentor:
    def __init__(self, name, surname, courses_attached=None):
        self.name = name
        self.surname = surname
        self.courses_attached = courses_attached if courses_attached is not None else [] #Такая конструкция необходима
        #для предотвращения изменения объектов при их многократном создании

#Создаем дочерний класс "лекторы", который принимает атрибуты экземпляра с их значением параметра из родительского
# класса "преподователи"
class Lecturer(Mentor):
    def __init__(self, name, surname, courses_attached=None):
        super().__init__(name, surname, courses_attached)

#Создаем класс "эксперты, проверяющие домашние задания", который принимает атрибуты экземпляра с их значением параметра
# из родительского класса "преподователи"
class Reviewer(Mentor):
    def __init__(self, name, surname, courses_attached=None):
        super().__init__(name, surname, courses_attached)
